#duplicate variants of orf3a if they occur also in orf3b or orf3c
df_subset_orf3b_orf3c <- subset(df_variants,subset=(Position>=v_start_orfs["ORF3a"])&(Position<=v_end_orfs["ORF3a"]))
df_subset_orf3b_orf3c[which((df_subset_orf3b_orf3c$Position>=v_start_orfs["ORF3b"])&(df_subset_orf3b_orf3c$Position<=v_end_orfs["ORF3b"])),"ORF"] <- "ORF3b"
df_subset_orf3b_orf3c[which((df_subset_orf3b_orf3c$Position>=v_start_orfs["ORF3c"])&(df_subset_orf3b_orf3c$Position<=v_end_orfs["ORF3c"])),"ORF"] <- "ORF3c"
df_subset_orf3b_orf3c[which((df_subset_orf3b_orf3c$Position>=v_start_orfs["ORF3b"])&(df_subset_orf3b_orf3c$Position<=v_end_orfs["ORF3b"])),"gene"] <- "ORF3b"
df_subset_orf3b_orf3c[which((df_subset_orf3b_orf3c$Position>=v_start_orfs["ORF3c"])&(df_subset_orf3b_orf3c$Position<=v_end_orfs["ORF3c"])),"gene"] <- "ORF3c"
df_subset_orf3b_orf3c <- subset(df_subset_orf3b_orf3c,ORF!="ORF3a")
df_variants <- rbind(df_variants,df_subset_orf3b_orf3c)
df_variants
#duplicate variants of ORF7a if they occur also in ORF7b
df_subset_orf7b <- subset(df_variants,subset=(Position>=v_start_orfs["ORF7a"])&(Position<=v_end_orfs["ORF7a"]))
df_subset_orf7b[which((df_subset_orf7b$Position>=v_start_orfs["ORF7b"])&(df_subset_orf7b$Position<=v_end_orfs["ORF7b"])),"ORF"] <- "ORF7b"
df_subset_orf7b <- subset(df_subset_orf7b,ORF!="ORF7a")
df_variants <- rbind(df_variants,df_subset_orf7b)
#duplicate variants of N if they occur also in orf9c
df_subset_ORF9c <- subset(df_variants,subset=(Position>=v_start_orfs["N"])&(Position<=v_end_orfs["N"]))
df_subset_ORF9c[which((df_subset_ORF9c$Position>=v_start_orfs["ORF9c"])&(df_subset_ORF9c$Position<=v_end_orfs["ORF9c"])),"ORF"] <- "ORF9c"
df_subset_ORF9c <- subset(df_subset_ORF9c,ORF!="N")
df_variants <- rbind(df_variants,df_subset_ORF9c)
#color palettes
set.seed(1234)
palette_orfs <- distinctColorPalette(length(v_orfs))
names(palette_orfs) <- v_orfs
# pie(rep(1, length(v_orfs)), col=palette_orfs)
palette_genes <- distinctColorPalette(length(v_genes_with_unique_product))
names(palette_genes) <- v_genes_with_unique_product
#function to get mutation in genomic format
find_candidate_genomic_mutation_causing_aa_change_in_orf <- function(current_mutation_name){
the_orf <- strsplit(x = current_mutation_name,split = ":")[[1]][1]
the_mut <-strsplit(x = current_mutation_name,split = ":")[[1]][2]
old_aa <- substr(the_mut,1,1)
new_aa <- substr(the_mut,nchar(the_mut),nchar(the_mut))
pos_in_orf_prot_seq <- as.integer(substr(the_mut,2,nchar(the_mut)-1))
pos_start_codon_in_orf <- ((pos_in_orf_prot_seq-1)*3)+1
pos_middle_codon_in_orf <- pos_start_codon_in_orf + 1
pos_stop_codon_in_orf <- pos_start_codon_in_orf + 2
pos_start_codon_in_genome <- v_start_orfs[the_orf] + pos_start_codon_in_orf - 1
pos_middle_codon_in_genome <- v_start_orfs[the_orf] + pos_middle_codon_in_orf - 1
pos_stop_codon_in_genome <- v_start_orfs[the_orf] + pos_stop_codon_in_orf - 1
ref_codon <- substr(genome_refseq,pos_start_codon_in_genome,pos_stop_codon_in_genome)
if (old_aa!=translate_seq(the_codon = ref_codon)){
stop("Logical error: extracted reference codon does not translate into old aa!")
}
v_candidate_genomic_mutations <- NULL
for (pos_in_codon in 1:3){
for (current_new_nucl in setdiff(c("A","T","C","G"),substr(ref_codon,pos_in_codon,pos_in_codon))){
if (pos_in_codon ==1){
new_codon <- paste0(current_new_nucl,substr(ref_codon,2,3))
}else if (pos_in_codon ==2){
new_codon <- paste0(substr(ref_codon,1,1),current_new_nucl,substr(ref_codon,3,3))
}else if (pos_in_codon ==3){
new_codon <- paste0(substr(ref_codon,1,1),substr(ref_codon,2,2),current_new_nucl)
}else{
stop("Logical error: position in codon cannot be different than 1, 2 or 3!")
}
if (translate_seq(new_codon)==new_aa){
v_candidate_genomic_mutations <- c(v_candidate_genomic_mutations,paste0(substr(ref_codon,pos_in_codon,pos_in_codon),pos_start_codon_in_genome+pos_in_codon-1,current_new_nucl))
}
}
}
return(v_candidate_genomic_mutations)
}
#compute Shannon entropy
get_entropy <- function(target) {
freq <- table(target)/length(target)
# vectorize
vec <- as.data.frame(freq)[,2]
#drop 0 to avoid NaN resulting from log2
vec<-vec[vec>0]
#compute entropy
-sum(vec * log2(vec))
}
#function that find the original and mutated codons of a variant
get_ref_and_mutated_codon <- function(the_position,ref_nucl,new_nucl){
the_orf <- find_ORF_of_mutation(the_position)
if (is.na(the_orf)||(grepl(pattern = "UTR",x = the_orf,fixed = TRUE))){
the_ref_codon <- NA
the_mut_codon <- NA
}else{
pos_in_codon <- ((the_position - v_start_orfs[the_orf] + 1)%%3)+(3*as.integer(((the_position - v_start_orfs[the_orf] + 1)%%3)==0))
if (pos_in_codon==1){
the_ref_codon <- paste0(ref_nucl,substr(x = genome_refseq,start = the_position+1,stop = the_position+2),sep="")
the_mut_codon <- paste0(new_nucl,substr(x = genome_refseq,start = the_position+1,stop = the_position+2),sep="")
}else if (pos_in_codon==2){
the_ref_codon <- paste0(substr(x = genome_refseq,start = the_position-1,stop = the_position-1),ref_nucl,substr(x = genome_refseq,start = the_position+1,stop = the_position+1),sep="")
the_mut_codon <- paste0(substr(x = genome_refseq,start = the_position-1,stop = the_position-1),new_nucl,substr(x = genome_refseq,start = the_position+1,stop = the_position+1),sep="")
}else if (pos_in_codon==3){
the_ref_codon <- paste0(substr(x = genome_refseq,start = the_position-2,stop = the_position-1),ref_nucl,sep="")
the_mut_codon <- paste0(substr(x = genome_refseq,start = the_position-2,stop = the_position-1),new_nucl,sep="")
}else{
stop("Codon position must be between 1 and 3!!!")
}
}
return(list(ref_codon=the_ref_codon,mutated_codon=the_mut_codon))
}
#build function that determines whether a mutation is synonymous or not
is_mutation_synonymous <- function(the_reference_codon,the_mutated_codon){
if (the_reference_codon %in% c("TAA","TAG","TGA")){
return(NA)
}else{
return(seqinr::translate(seq = unlist(strsplit(the_reference_codon,"")))==seqinr::translate(seq = unlist(strsplit(the_mutated_codon,""))))
}
}
#build function that determines whether a mutation is synonymous or not
translate_seq <- function(the_codon){
if (is.na(the_codon)){
return(NA)
}else if (the_codon %in% c("TAA","TAG","TGA")){
return("Stop")
}else{
return(seqinr::translate(seq = unlist(strsplit(the_codon,""))))
}
}
#function for plotting linear model
ggplotRegression <- function (fit,ggsave_path,the_filename,xlabl=NA,ylabl=NA) {
library(ggplot2)
bool_gg_save <- TRUE
if(is.na(xlabl)){
xlabl <- names(fit$model)[2]
}
if(is.na(ylabl)){
ylabl <- names(fit$model)[1]
}
adj_r_sq <- formatC(summary(fit)$adj.r.squared, format = "e", digits = 3)
slope <-formatC(summary(fit)$coefficients[,1][2], format = "e", digits = 3)
p_val <- ifelse(test = "Iter"%in%colnames(summary(fit)$coefficients),yes=ifelse(test = unname(summary(fit)$coefficients[,3][2])<(2E-4),yes = "<2E-4",no = formatC(unname(summary(fit)$coefficients[,3][2]), format = "e", digits = 3)),no=ifelse(test = unname(summary(fit)$coefficients[,4][2])<(2e-16),yes = "<2e-16",no = formatC(unname(summary(fit)$coefficients[,4][2]), format = "e", digits = 3)))
tryCatch(expr = {ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
xlab(xlabl)+
ylab(ylabl)+
labs(title = paste("Adj R2 = ",adj_r_sq,
" Slope =",slope,
" P: ",p_val))+ theme(plot.title=element_text(hjust=0,size=12))},error=function(e) bool_gg_save <- FALSE)
if (bool_gg_save){
ggsave(filename = the_filename, path=ggsave_path, width = 15, height = 10, units = "cm")
}else{
print(paste0(the_filename, "won't be created because of it is irrelevant for gene in path ", ggsave_path))
}
#return result as the real float numbers
adj_r_sq <- unname(summary(fit)$adj.r.squared)
slope <-unname(summary(fit)$coefficients[,1][2])
p_val <- ifelse(test = "Iter"%in%colnames(summary(fit)$coefficients),yes=ifelse(test = unname(summary(fit)$coefficients[,3][2])<(2E-4),yes = "<2E-4",no = unname(summary(fit)$coefficients[,3][2])),no=ifelse(test = unname(summary(fit)$coefficients[,4][2])<(2e-16),yes = "<2e-16",no = unname(summary(fit)$coefficients[,4][2])))
return(list(adj_r_sq_current_lm = adj_r_sq,slope_current_lm = slope,p_val_current_lm=p_val))
}
ggplotRegression_export_eps <- function (fit,ggsave_path,the_filename,xlabl=NA,ylabl=NA) {
library(ggplot2)
bool_gg_save <- TRUE
if(is.na(xlabl)){
xlabl <- names(fit$model)[2]
}
if(is.na(ylabl)){
ylabl <- names(fit$model)[1]
}
adj_r_sq <- formatC(summary(fit)$adj.r.squared, format = "e", digits = 3)
slope <-formatC(summary(fit)$coefficients[,1][2], format = "e", digits = 3)
p_val <- ifelse(test = "Iter"%in%colnames(summary(fit)$coefficients),yes=ifelse(test = unname(summary(fit)$coefficients[,3][2])<(2E-4),yes = "<2E-4",no = formatC(unname(summary(fit)$coefficients[,3][2]), format = "e", digits = 3)),no=ifelse(test = unname(summary(fit)$coefficients[,4][2])<(2e-16),yes = "<2e-16",no = formatC(unname(summary(fit)$coefficients[,4][2]), format = "e", digits = 3)))
tryCatch(expr = {ggplot(fit$model, aes_string(x = names(fit$model)[2], y = names(fit$model)[1])) +
geom_point() +
stat_smooth(method = "lm", col = "red") +
xlab(xlabl)+
ylab(ylabl)+
labs(title = paste("Adj R2 = ",adj_r_sq,
" Slope =",slope,
" P: ",p_val))+ theme(plot.title=element_text(hjust=0,size=12))},error=function(e) bool_gg_save <- FALSE)
if (bool_gg_save){
ggsave(filename = the_filename, path=ggsave_path, width = 15, height = 10, units = "cm", device = cairo_ps)
}else{
print(paste0(the_filename, "won't be created because of it is irrelevant for gene in path ", ggsave_path))
}
#return result as the real float numbers
adj_r_sq <- unname(summary(fit)$adj.r.squared)
slope <-unname(summary(fit)$coefficients[,1][2])
p_val <- ifelse(test = "Iter"%in%colnames(summary(fit)$coefficients),yes=ifelse(test = unname(summary(fit)$coefficients[,3][2])<(2E-4),yes = "<2E-4",no = unname(summary(fit)$coefficients[,3][2])),no=ifelse(test = unname(summary(fit)$coefficients[,4][2])<(2e-16),yes = "<2e-16",no = unname(summary(fit)$coefficients[,4][2])))
return(list(adj_r_sq_current_lm = adj_r_sq,slope_current_lm = slope,p_val_current_lm=p_val))
}
# get_amplicon_of_position <- function(the_position){
#   if (nrow(subset(df_amplicon_positions,(the_position>=start)&(the_position<=stop)))>0){
#     return(subset(df_amplicon_positions,(the_position>=start)&(the_position<=stop))$amplicon_name)
#   }else{
#     return("")
#   }
# }
#Original codon and mutated codon
df_variants$ref_codon <- NA
df_variants$mut_codon <- NA
df_variants$pos_in_ORF <- NA
df_variants$pos_in_gene <- NA
df_variants$pos_in_protein <- NA
for (i in 1:nrow(df_variants)){
df_variants$ref_codon[i] <-(get_ref_and_mutated_codon(the_position = df_variants$Position[i],ref_nucl = df_variants$Ref[i],new_nucl = df_variants$VarAllele[i]))$ref_codon
df_variants$mut_codon[i] <-(get_ref_and_mutated_codon(the_position = df_variants$Position[i],ref_nucl = df_variants$Ref[i],new_nucl = df_variants$VarAllele[i]))$mutated_codon
df_variants$old_aa[i] <- translate_seq(the_codon = df_variants$ref_codon[i] )
df_variants$new_aa[i] <- translate_seq(the_codon = df_variants$mut_codon[i] )
df_variants$pos_in_ORF[i] <- df_variants$Position[i] - v_start_orfs[df_variants$ORF[i]] + 1
df_variants$pos_in_gene[i] <- df_variants$Position[i] - v_start_genes[df_variants$gene[i]] + 1
df_variants$pos_in_protein[i] <- ceiling(df_variants$pos_in_gene[i]/3)
}
df_variants
df_variants$mutation_name <- paste0(paste0(df_variants$Ref,df_variants$Position,df_variants$VarAllele,""),";",paste0(df_variants$old_aa,df_variants$pos_in_protein,df_variants$new_aa),";",df_variants$ORF,";",df_variants$gene)
#Define Nonsense and non-coding mutations
df_variants$is_nonsense <- (df_variants$new_aa=="Stop")
df_variants$is_UTR <- (is.na(df_variants$new_aa))
#import metadata
df_Metadata_samples <- read.csv2(file = paste0(input_workspace,"Metadata_samples.csv"),sep = ";",header = TRUE,stringsAsFactors = FALSE)
df_Metadata_samples
colnames(df_Metadata_samples)[1] <- "Sample"
df_Metadata_samples$Ct <- as.numeric(df_Metadata_samples$Ct)
df_Metadata_samples$label_cardinal_point <- NA
df_Metadata_samples$label_search_sample <- NA
df_Metadata_samples$label_search_location <- NA
df_Metadata_samples$label_search_site_id_1 <- NA
df_Metadata_samples$label_search_site_id_2 <- NA
df_Metadata_samples$label_search_date_format_1 <- NA
df_Metadata_samples$label_search_date_format_2 <- NA
for (i in 1:nrow(df_Metadata_samples)){
current_v_pos_sep <- gregexpr(pattern = "_",text = df_Metadata_samples$Sample[i],fixed = T)[[1]]
df_Metadata_samples$label_search_sample[i] <- paste0(df_Metadata_samples$Sample[i],"_2")
df_Metadata_samples$label_search_location[i] <- substr(df_Metadata_samples$Sample[i],1,current_v_pos_sep[1]-1)
df_Metadata_samples$label_search_site_id_1[i] <- paste0("_",as.character(as.integer(substr(df_Metadata_samples$Sample[i],current_v_pos_sep[1]+1,current_v_pos_sep[2]-1))),"_")
df_Metadata_samples$label_search_site_id_2[i] <- paste0(substr(df_Metadata_samples$Sample[i],current_v_pos_sep[1]+1,current_v_pos_sep[2]-1),"_")
df_Metadata_samples$label_search_date_format_1[i] <- as.character(format(as.Date(df_Metadata_samples$Sampling_date[i],"%Y-%m-%d"),"%d-%m-%Y"))
df_Metadata_samples$label_search_date_format_2[i] <- as.character(format(as.Date(df_Metadata_samples$Sampling_date[i],"%Y-%m-%d"),"%d-%m-%y"))
if (grepl(pattern = "NORTH",x = toupper(df_Metadata_samples$Sampling_site[i]),fixed = T)){
df_Metadata_samples$label_cardinal_point[i] <- "NORTH"
}else if (grepl(pattern = "SOUTH",x = toupper(df_Metadata_samples$Sampling_site[i]),fixed = T)){
df_Metadata_samples$label_cardinal_point[i] <- "SOUTH"
}else if (grepl(pattern = "EAST",x = toupper(df_Metadata_samples$Sampling_site[i]),fixed = T)){
df_Metadata_samples$label_cardinal_point[i] <- "EAST"
}else if (grepl(pattern = "WEST",x = toupper(df_Metadata_samples$Sampling_site[i]),fixed = T)){
df_Metadata_samples$label_cardinal_point[i] <- "WEST"
}
}
#calculate the number of SNVs per samples
v_nb_SNVs_per_sample <- as.vector(table(df_variants$Sample)[lst_samples_original])
names(v_nb_SNVs_per_sample) <- lst_samples_original
v_nb_SNVs_per_sample <- ifelse(test = is.na(v_nb_SNVs_per_sample),yes=0,no=v_nb_SNVs_per_sample)
#coverage plot
#average depth per sample
df_raw_depth_report <- read.csv2(file = paste0(input_workspace,depth_report_filename),sep = "\t",header = FALSE,stringsAsFactors = FALSE)
v_avg_depth_samples <- colMeans(df_raw_depth_report[,3:ncol(df_raw_depth_report)],na.rm = TRUE)
df_cov_avg_depth_per_sample = data.frame(sample=lst_samples_original,nb_SNVs=v_nb_SNVs_per_sample,avg_depth=v_avg_depth_samples,Ct=NA,stringsAsFactors = FALSE)
v_nb_SNVs_per_sample
v_nb_SNVs_per_sample
df_raw_depth_report
v_avg_depth_samples
v_avg_depth_samples <- colMeans(df_raw_depth_report[,3:ncol(df_raw_depth_report)],na.rm = TRUE)
df_raw_depth_report
df_raw_depth_report[,3:ncol(df_raw_depth_report)]
colMeans(df_raw_depth_report[,3:ncol(df_raw_depth_report)],na.rm = TRUE)
?colMeans
df_raw_depth_report[,3:ncol(df_raw_depth_report)]
ncol(df_raw_depth_report)
v_avg_depth_samples <- mean(df_raw_depth_report[,3:ncol(df_raw_depth_report)],na.rm = TRUE)
v_avg_depth_samples
df_cov_avg_depth_per_sample = data.frame(sample=lst_samples_original,nb_SNVs=v_nb_SNVs_per_sample,avg_depth=v_avg_depth_samples,Ct=NA,stringsAsFactors = FALSE)
df_cov_avg_depth_per_sample
for (i in 1:nrow(df_cov_avg_depth_per_sample)){
if (sum(unname(vapply(X = 1:nrow(df_Metadata_samples),FUN = function(j) grepl(pattern = toupper(df_Metadata_samples$label_search_sample[j]),x = toupper(df_cov_avg_depth_per_sample$sample[i]),fixed=T)&(grepl(pattern = df_Metadata_samples$label_search_sample[j],x = df_cov_avg_depth_per_sample$sample[i],fixed=T))&(!is.na(df_Metadata_samples$Sampling_date[j])), FUN.VALUE = c(T))))==1){
df_cov_avg_depth_per_sample$Ct[i] <- subset(df_Metadata_samples,unname(vapply(X = 1:nrow(df_Metadata_samples),FUN = function(j) grepl(pattern = toupper(df_Metadata_samples$label_search_sample[j]),x = toupper(df_cov_avg_depth_per_sample$sample[i]),fixed=T)&(grepl(pattern = df_Metadata_samples$label_search_sample[j],x = df_cov_avg_depth_per_sample$sample[i],fixed=T))&(!is.na(df_Metadata_samples$Sampling_date[j])), FUN.VALUE = c(T))))$Ct[1]
}else{
if (any(unname(vapply(X = 1:nrow(df_Metadata_samples),FUN = function(j) grepl(pattern = toupper(df_Metadata_samples$label_search_location[j]),x = toupper(df_cov_avg_depth_per_sample$sample[i]),fixed=T)&((grepl(pattern = df_Metadata_samples$label_search_date_format_1[j],x = df_cov_avg_depth_per_sample$sample[i],fixed=T))|(grepl(pattern = df_Metadata_samples$label_search_date_format_2[j],x = df_cov_avg_depth_per_sample$sample[i],fixed=T)))&(!is.na(df_Metadata_samples$Sampling_date[j]))&((grepl(pattern = df_Metadata_samples$label_search_site_id_1[j],x = df_cov_avg_depth_per_sample$sample[i],fixed=T))|((grepl(pattern = df_Metadata_samples$label_cardinal_point[j],x = toupper(df_cov_avg_depth_per_sample$sample[i]),fixed=T))&(!is.na(df_Metadata_samples$label_cardinal_point[j])))|(grepl(pattern = df_Metadata_samples$label_search_site_id_2[j],x = df_cov_avg_depth_per_sample$sample[i],fixed=T))), FUN.VALUE = c(T))))){
if ((grepl(pattern = "GRB",x = toupper(df_cov_avg_depth_per_sample$sample[i]),fixed=T))|(grepl(pattern = "GRAB",x = toupper(df_cov_avg_depth_per_sample$sample[i]),fixed=T))){
df_cov_avg_depth_per_sample$Ct[i] <- subset(df_Metadata_samples, unname(vapply(X = 1:nrow(df_Metadata_samples),FUN = function(j) grepl(pattern = toupper(df_Metadata_samples$label_search_location[j]),x = toupper(df_cov_avg_depth_per_sample$sample[i]),fixed=T)&((grepl(pattern = df_Metadata_samples$label_search_date_format_1[j],x = df_cov_avg_depth_per_sample$sample[i],fixed=T))|(grepl(pattern = df_Metadata_samples$label_search_date_format_2[j],x = df_cov_avg_depth_per_sample$sample[i],fixed=T)))&(!is.na(df_Metadata_samples$Sampling_date[j]))&((grepl(pattern = df_Metadata_samples$label_search_site_id_1[j],x = df_cov_avg_depth_per_sample$sample[i],fixed=T))|((grepl(pattern = df_Metadata_samples$label_cardinal_point[j],x = toupper(df_cov_avg_depth_per_sample$sample[i]),fixed=T))&(!is.na(df_Metadata_samples$label_cardinal_point[j])))|(grepl(pattern = df_Metadata_samples$label_search_site_id_2[j],x = df_cov_avg_depth_per_sample$sample[i],fixed=T)))&((grepl(pattern = "GRB",x = toupper(df_Metadata_samples$Sample[j]),fixed=T))|(grepl(pattern = "GRAB",x = toupper(df_Metadata_samples$Sample[j]),fixed=T))), FUN.VALUE = c(T))))$Ct[1]
}else{
df_cov_avg_depth_per_sample$Ct[i] <- subset(df_Metadata_samples, unname(vapply(X = 1:nrow(df_Metadata_samples),FUN = function(j) grepl(pattern = toupper(df_Metadata_samples$label_search_location[j]),x = toupper(df_cov_avg_depth_per_sample$sample[i]),fixed=T)&((grepl(pattern = df_Metadata_samples$label_search_date_format_1[j],x = df_cov_avg_depth_per_sample$sample[i],fixed=T))|(grepl(pattern = df_Metadata_samples$label_search_date_format_2[j],x = df_cov_avg_depth_per_sample$sample[i],fixed=T)))&(!is.na(df_Metadata_samples$Sampling_date[j]))&((grepl(pattern = df_Metadata_samples$label_search_site_id_1[j],x = df_cov_avg_depth_per_sample$sample[i],fixed=T))|((grepl(pattern = df_Metadata_samples$label_cardinal_point[j],x = toupper(df_cov_avg_depth_per_sample$sample[i]),fixed=T))&(!is.na(df_Metadata_samples$label_cardinal_point[j])))|(grepl(pattern = df_Metadata_samples$label_search_site_id_2[j],x = df_cov_avg_depth_per_sample$sample[i],fixed=T)))&((grepl(pattern = "CPT",x = toupper(df_Metadata_samples$Sample[j]),fixed=T))|(grepl(pattern = "COMPOSITE",x = toupper(df_Metadata_samples$Sample[j]),fixed=T))), FUN.VALUE = c(T))))$Ct[1]
}
}else{
df_cov_avg_depth_per_sample$Ct[i] <- NA
}
}
}
df_cov_avg_depth_per_sample$Ct <- as.numeric(df_cov_avg_depth_per_sample$Ct)
df_cov_avg_depth_per_sample
#df_cov_avg_depth_per_sample$log10_nb_SNVs <- log10(df_cov_avg_depth_per_sample$nb_SNVs)
df_cov_avg_depth_per_sample$log10_avg_depth <- log10(df_cov_avg_depth_per_sample$avg_depth)
ggplotRegression(fit = lmp(nb_SNVs~avg_depth,data = df_cov_avg_depth_per_sample,center = FALSE,Iter=9999),ggsave_path = output_workspace,the_filename = "nb_SNVs_vs_Coverage_Qc.png",xlabl = "Sample average coverage",ylabl = "Number of SNVs per sample")
df_cov_avg_depth_per_sample
df_depth <- data.frame(sample=lst_samples_original[1],position=df_raw_depth_report[,2],depth=df_raw_depth_report[,3],stringsAsFactors = FALSE)
df_depth
for (i in 2:nb_samples_original){
df_depth <- rbind(df_depth,data.frame(sample=lst_samples_original[i],position=df_raw_depth_report[,2],depth=df_raw_depth_report[,2+i],stringsAsFactors = FALSE))
}
nb_samples_original
if (nb_samples_original > 1){
for (i in 2:nb_samples_original){
df_depth <- rbind(df_depth,data.frame(sample=lst_samples_original[i],position=df_raw_depth_report[,2],depth=df_raw_depth_report[,2+i],stringsAsFactors = FALSE))
}
df_depth$ORF <- unname(vapply(X = df_depth$position,FUN = find_ORF_of_mutation,FUN.VALUE = c("")))
df_depth <- unique(df_depth)
}
df_depth
#PCA of samples by SNVs VAF
mtx_VAF_per_sample <- (as.matrix((reshape2::acast(df_variants, Sample~mutation_name, value.var="VarFreq"))))
mtx_VAF_per_sample[is.na(mtx_VAF_per_sample)] <- 0
mtx_pres_abs_snvs_in_samples <- ifelse(mtx_VAF_per_sample>0,yes=1,no=0)
write.table(x=mtx_VAF_per_sample,file = paste0(output_workspace,"mtx_VAF_per_sample.csv"),sep = ",",na = "NA",row.names = TRUE,col.names = TRUE)
location_samples <- as.vector(unname(vapply(X = rownames(mtx_VAF_per_sample),FUN = function(x) subset(df_variants,Sample==x)$location[1],FUN.VALUE = c(""))))
location_samples <- ifelse(test = location_samples=="NA",yes = NA,no=location_samples)
site_samples <- unname(vapply(X = rownames(mtx_VAF_per_sample),FUN = get_site_of_sample,FUN.VALUE = c("")))
site_samples <- ifelse(test = site_samples=="NA",yes = NA,no=site_samples)
#PCA VAF across Samples
# the_pca_WW_samples <- prcomp(mtx_VAF_per_sample, center = T,scale. = T)
# ggbiplot::ggbiplot(the_pca_WW_samples,ellipse=T,labels=rownames(mtx_VAF_per_sample),var.axes = F)
#tSNE
res_tsne <- Rtsne::Rtsne(mtx_VAF_per_sample, dims = 2, perplexity=30, verbose=TRUE, max_iter = 9999)
#PCA of samples by SNVs VAF
mtx_VAF_per_sample <- (as.matrix((reshape2::acast(df_variants, Sample~mutation_name, value.var="VarFreq"))))
mtx_VAF_per_sample[is.na(mtx_VAF_per_sample)] <- 0
mtx_pres_abs_snvs_in_samples <- ifelse(mtx_VAF_per_sample>0,yes=1,no=0)
write.table(x=mtx_VAF_per_sample,file = paste0(output_workspace,"mtx_VAF_per_sample.csv"),sep = ",",na = "NA",row.names = TRUE,col.names = TRUE)
location_samples <- as.vector(unname(vapply(X = rownames(mtx_VAF_per_sample),FUN = function(x) subset(df_variants,Sample==x)$location[1],FUN.VALUE = c(""))))
location_samples <- ifelse(test = location_samples=="NA",yes = NA,no=location_samples)
site_samples <- unname(vapply(X = rownames(mtx_VAF_per_sample),FUN = get_site_of_sample,FUN.VALUE = c("")))
site_samples <- ifelse(test = site_samples=="NA",yes = NA,no=site_samples)
#PERMANOVA
mtx_sample_dist <- vegan::vegdist(mtx_VAF_per_sample, method='bray')
#set.seed(1234)#reproducible results
#permanova_sample_vaf_profile_vs_location <- adonis2(mtx_sample_dist~location_samples, permutations = 9999, method="bray", strata="PLOT")
#permanova_sample_vaf_profile_vs_location
mtx_sample_dist_for_sites <- vegan::vegdist(mtx_VAF_per_sample[!is.na(site_samples),], method='bray')
site_samples_for_sites <- site_samples[!is.na(site_samples)]
site_samples_for_sites
# #mean coverage per Sample for each ORF
df_plot_mean_cov_per_sample_by_ORF <- data.frame(Sample=rep(sort(unique(df_depth$sample)),length(v_orfs[!v_orfs%in%c("ORF3b","ORF3c","ORF9c")])),ORF=rep(v_orfs[!v_orfs%in%c("ORF3b","ORF3c","ORF9c")],nb_samples_original),stringsAsFactors = F)
df_plot_mean_cov_per_sample_by_ORF$avg_cov <- unname(vapply(X = 1:nrow(df_plot_mean_cov_per_sample_by_ORF),FUN = function(i) mean(subset(df_depth,(sample==df_plot_mean_cov_per_sample_by_ORF$Sample[i])&(ORF==df_plot_mean_cov_per_sample_by_ORF$ORF[i]))$depth,na.rm=T),FUN.VALUE = c(0.0)))
df_plot_mean_cov_per_sample_by_ORF
df_plot_mean_cov_per_sample_by_ORF$avg_cov <- unname(vapply(X = 1:nrow(df_plot_mean_cov_per_sample_by_ORF),FUN = function(i) mean(subset(df_depth,(sample==df_plot_mean_cov_per_sample_by_ORF$Sample[i])&(ORF==df_plot_mean_cov_per_sample_by_ORF$ORF[i]))$depth,na.rm=T),FUN.VALUE = c(0.0)))
df_plot_mean_cov_per_sample_by_ORF
df_plot_mean_cov_per_sample_by_ORF
df_plot_mean_cov_per_sample_by_ORF$avg_cov <- unname(vapply(X = 1:nrow(df_plot_mean_cov_per_sample_by_ORF),FUN = function(i) mean(subset(df_depth,(sample==df_plot_mean_cov_per_sample_by_ORF$Sample[i])&(ORF==df_plot_mean_cov_per_sample_by_ORF$ORF[i]))$depth,na.rm=T),FUN.VALUE = c(0.0)))
nrow(df_plot_mean_cov_per_sample_by_ORF)
#[subset(df_depth,(sample==df_plot_mean_cov_per_sample_by_ORF$Sample[i])&(ORF==df_plot_mean_cov_per_sample_by_ORF$ORF[i]))$depth>0]
ggplot(data = df_plot_mean_cov_per_sample_by_ORF,mapping=aes(x=factor(ORF,levels=v_orfs[!v_orfs%in%c("ORF3b","ORF3c","ORF9c")]),y=log10(avg_cov))) + geom_violin(fill="red3") + geom_jitter() + geom_boxplot(width=0.1)  + xlab("Genomic region") + ylab("log10(Mean coverage per sample)") + theme(axis.title = element_text(size=12),axis.text = element_text(size=12),legend.title = element_text(size=12),legend.text = element_text(size=8),axis.text.x = element_text(angle = 60,hjust=1))
df_plot_mean_cov_per_sample_by_ORF
df_plot_mean_cov_per_sample_by_ORF
df_depth
df_plot_mean_cov_per_sample_by_ORF
df_depth
lst_samples_original
df_raw_depth_report
df_depth <- data.frame(sample=lst_samples_original[1],position=df_raw_depth_report[,2],depth=df_raw_depth_report[,3],stringsAsFactors = FALSE)
df_depth$ORF <- unname(vapply(X = df_depth$position,FUN = find_ORF_of_mutation,FUN.VALUE = c("")))
df_depth
df_depth <- unique(df_depth)
# #mean coverage per Sample for each ORF
df_plot_mean_cov_per_sample_by_ORF <- data.frame(Sample=rep(sort(unique(df_depth$sample)),length(v_orfs[!v_orfs%in%c("ORF3b","ORF3c","ORF9c")])),ORF=rep(v_orfs[!v_orfs%in%c("ORF3b","ORF3c","ORF9c")],nb_samples_original),stringsAsFactors = F)
df_plot_mean_cov_per_sample_by_ORF$avg_cov <- unname(vapply(X = 1:nrow(df_plot_mean_cov_per_sample_by_ORF),FUN = function(i) mean(subset(df_depth,(sample==df_plot_mean_cov_per_sample_by_ORF$Sample[i])&(ORF==df_plot_mean_cov_per_sample_by_ORF$ORF[i]))$depth,na.rm=T),FUN.VALUE = c(0.0)))
#[subset(df_depth,(sample==df_plot_mean_cov_per_sample_by_ORF$Sample[i])&(ORF==df_plot_mean_cov_per_sample_by_ORF$ORF[i]))$depth>0]
ggplot(data = df_plot_mean_cov_per_sample_by_ORF,mapping=aes(x=factor(ORF,levels=v_orfs[!v_orfs%in%c("ORF3b","ORF3c","ORF9c")]),y=log10(avg_cov))) + geom_violin(fill="red3") + geom_jitter() + geom_boxplot(width=0.1)  + xlab("Genomic region") + ylab("log10(Mean coverage per sample)") + theme(axis.title = element_text(size=12),axis.text = element_text(size=12),legend.title = element_text(size=12),legend.text = element_text(size=8),axis.text.x = element_text(angle = 60,hjust=1))
ggsave(filename = "ORF_mean_coverage_per_sample.png", path=output_workspace, width = 20, height = 15, units = "cm")
df_plot_mean_cov_per_sample_by_ORF$breadth_of_cov <- unname(vapply(X = 1:nrow(df_plot_mean_cov_per_sample_by_ORF),FUN = function(i) length(unique(subset(df_depth,(sample==df_plot_mean_cov_per_sample_by_ORF$Sample[i])&(ORF==df_plot_mean_cov_per_sample_by_ORF$ORF[i])&(depth>=min_cov)&(!is.na(depth)))$position))/(v_orfs_length[df_plot_mean_cov_per_sample_by_ORF$ORF[i]]) ,FUN.VALUE = c(0.0)))
ggplot(data = df_plot_mean_cov_per_sample_by_ORF,mapping=aes(x=factor(ORF,levels=v_orfs[!v_orfs%in%c("ORF3b","ORF3c","ORF9c")]),y=((breadth_of_cov)))) + geom_jitter() + geom_violin(fill="red3") + xlab("Genomic region") + ylab("Breadth of coverage per sample") + theme(axis.title = element_text(size=12),axis.text = element_text(size=12),legend.title = element_text(size=12),legend.text = element_text(size=8),axis.text.x = element_text(angle = 60,hjust=1))
ggsave(filename = "ORF_breadth_of_coverage_per_sample.png", path=output_workspace, width = 20, height = 15, units = "cm")
df_raw_depth_report$ORF <- vapply(X = df_raw_depth_report[,2],FUN = function(x) return(find_ORF_of_mutation(the_site_position = x)),FUN.VALUE = c(""))
df_raw_depth_report_orf3bc <- subset(df_raw_depth_report,((df_raw_depth_report$V2>=v_start_orfs["ORF3a"]) & (df_raw_depth_report$V2<=v_end_orfs["ORF3a"])))
df_raw_depth_report_orf3bc$ORF <- ifelse(test = ((df_raw_depth_report_orf3bc$V2>=v_start_orfs["ORF3b"]) & (df_raw_depth_report_orf3bc$V2<=v_end_orfs["ORF3b"])),yes="ORF3b",no=df_raw_depth_report_orf3bc$ORF)
df_raw_depth_report_orf3bc$ORF <- ifelse(test = ((df_raw_depth_report_orf3bc$V2>=v_start_orfs["ORF3c"]) & (df_raw_depth_report_orf3bc$V2<=v_end_orfs["ORF3c"])),yes="ORF3c",no=df_raw_depth_report_orf3bc$ORF)
df_raw_depth_report_orf3bc <- subset(df_raw_depth_report_orf3bc,ORF!="ORF3a")
df_raw_depth_report <- rbind(df_raw_depth_report,df_raw_depth_report_orf3bc)
df_raw_depth_report_ORF9c <- subset(df_raw_depth_report,((df_raw_depth_report$V2>=v_start_orfs["N"]) & (df_raw_depth_report$V2<=v_end_orfs["N"])))
df_raw_depth_report_ORF9c$ORF <- ifelse(test = ((df_raw_depth_report_ORF9c$V2>=v_start_orfs["ORF9c"]) & (df_raw_depth_report_ORF9c$V2<=v_end_orfs["ORF9c"])),yes="ORF9c",no=df_raw_depth_report_ORF9c$ORF)
df_raw_depth_report_ORF9c <- subset(df_raw_depth_report_ORF9c,ORF!="N")
df_raw_depth_report <- rbind(df_raw_depth_report,df_raw_depth_report_ORF9c)
v_avg_cov_ORF <- vapply(X = v_orfs,FUN = function(x) return(mean((rowMeans(subset(df_raw_depth_report,ORF==x)[,3:(3+nb_samples-1)])),na.rm=TRUE)),FUN.VALUE = c(0.1))
v_orfs_length <- v_end_orfs - v_start_orfs + 1
df_raw_depth_report$gene <- vapply(X = df_raw_depth_report[,2],FUN = function(x) return(find_gene_of_mutation(the_site_position = x)),FUN.VALUE = c(""))
v_avg_cov_ORF <- vapply(X = v_orfs,FUN = function(x) return(mean((rowMeans(subset(df_raw_depth_report,ORF==x)[,3:(3+nb_samples-1)])),na.rm=TRUE)),FUN.VALUE = c(0.1))
df_raw_depth_report_orf3bc
df_raw_depth_report_orf3bc <- subset(df_raw_depth_report,((df_raw_depth_report$V2>=v_start_orfs["ORF3a"]) & (df_raw_depth_report$V2<=v_end_orfs["ORF3a"])))
df_raw_depth_report_orf3bc$ORF <- ifelse(test = ((df_raw_depth_report_orf3bc$V2>=v_start_orfs["ORF3b"]) & (df_raw_depth_report_orf3bc$V2<=v_end_orfs["ORF3b"])),yes="ORF3b",no=df_raw_depth_report_orf3bc$ORF)
df_raw_depth_report_orf3bc$ORF <- ifelse(test = ((df_raw_depth_report_orf3bc$V2>=v_start_orfs["ORF3c"]) & (df_raw_depth_report_orf3bc$V2<=v_end_orfs["ORF3c"])),yes="ORF3c",no=df_raw_depth_report_orf3bc$ORF)
df_raw_depth_report_orf3bc <- subset(df_raw_depth_report_orf3bc,ORF!="ORF3a")
df_raw_depth_report <- rbind(df_raw_depth_report,df_raw_depth_report_orf3bc)
df_raw_depth_report_ORF9c <- subset(df_raw_depth_report,((df_raw_depth_report$V2>=v_start_orfs["N"]) & (df_raw_depth_report$V2<=v_end_orfs["N"])))
df_raw_depth_report_ORF9c$ORF <- ifelse(test = ((df_raw_depth_report_ORF9c$V2>=v_start_orfs["ORF9c"]) & (df_raw_depth_report_ORF9c$V2<=v_end_orfs["ORF9c"])),yes="ORF9c",no=df_raw_depth_report_ORF9c$ORF)
df_raw_depth_report_ORF9c
df_raw_depth_report_ORF9c <- subset(df_raw_depth_report_ORF9c,ORF!="N")
df_raw_depth_report$ORF <- vapply(X = df_raw_depth_report[,2],FUN = function(x) return(find_ORF_of_mutation(the_site_position = x)),FUN.VALUE = c(""))
df_raw_depth_report_orf3bc <- subset(df_raw_depth_report,((df_raw_depth_report$V2>=v_start_orfs["ORF3a"]) & (df_raw_depth_report$V2<=v_end_orfs["ORF3a"])))
df_raw_depth_report_orf3bc$ORF <- ifelse(test = ((df_raw_depth_report_orf3bc$V2>=v_start_orfs["ORF3b"]) & (df_raw_depth_report_orf3bc$V2<=v_end_orfs["ORF3b"])),yes="ORF3b",no=df_raw_depth_report_orf3bc$ORF)
df_raw_depth_report_orf3bc$ORF <- ifelse(test = ((df_raw_depth_report_orf3bc$V2>=v_start_orfs["ORF3c"]) & (df_raw_depth_report_orf3bc$V2<=v_end_orfs["ORF3c"])),yes="ORF3c",no=df_raw_depth_report_orf3bc$ORF)
df_raw_depth_report_orf3bc <- subset(df_raw_depth_report_orf3bc,ORF!="ORF3a")
df_raw_depth_report <- rbind(df_raw_depth_report,df_raw_depth_report_orf3bc)
df_raw_depth_report_ORF9c <- subset(df_raw_depth_report,((df_raw_depth_report$V2>=v_start_orfs["N"]) & (df_raw_depth_report$V2<=v_end_orfs["N"])))
df_raw_depth_report_ORF9c$ORF <- ifelse(test = ((df_raw_depth_report_ORF9c$V2>=v_start_orfs["ORF9c"]) & (df_raw_depth_report_ORF9c$V2<=v_end_orfs["ORF9c"])),yes="ORF9c",no=df_raw_depth_report_ORF9c$ORF)
df_raw_depth_report_ORF9c <- subset(df_raw_depth_report_ORF9c,ORF!="N")
df_raw_depth_report <- rbind(df_raw_depth_report,df_raw_depth_report_ORF9c)
v_avg_cov_ORF <- vapply(X = v_orfs,FUN = function(x) return(mean((rowMeans(subset(df_raw_depth_report,ORF==x)[,3:(3+nb_samples-1)])),na.rm=TRUE)),FUN.VALUE = c(0.1))
v_orfs
v_avg_cov_ORF <- vapply(X = v_orfs,FUN = function(x) return(((rowMeans(subset(df_raw_depth_report,ORF==x)[,3:(3+nb_samples-1)])),na.rm=TRUE)),FUN.VALUE = c(0.1))
v_avg_cov_ORF <- vapply(X = v_orfs,FUN = function(x) return((rowMeans(subset(df_raw_depth_report,ORF==x)[,3:(3+nb_samples-1)]))),FUN.VALUE = c(0.1))
df_raw_depth_report
nb_samples
v_avg_cov_ORF <- vapply(X = v_orfs,FUN = function(x) return(mean(((subset(df_raw_depth_report,ORF==x)[,3:(3+nb_samples-1)])),na.rm=TRUE)),FUN.VALUE = c(0.1))
v_orfs_length <- v_end_orfs - v_start_orfs + 1
df_raw_depth_report$gene <- vapply(X = df_raw_depth_report[,2],FUN = function(x) return(find_gene_of_mutation(the_site_position = x)),FUN.VALUE = c(""))
df_raw_depth_report_orf3bc <- subset(df_raw_depth_report,((df_raw_depth_report$V2>=v_start_genes["ORF3a"]) & (df_raw_depth_report$V2<=v_end_genes["ORF3a"])))
df_raw_depth_report_orf3bc$gene <- ifelse(test = ((df_raw_depth_report_orf3bc$V2>=v_start_genes["ORF3b"]) & (df_raw_depth_report_orf3bc$V2<=v_end_genes["ORF3b"])),yes="ORF3b",no=df_raw_depth_report_orf3bc$gene)
df_raw_depth_report_orf3bc$gene <- ifelse(test = ((df_raw_depth_report_orf3bc$V2>=v_start_genes["ORF3c"]) & (df_raw_depth_report_orf3bc$V2<=v_end_genes["ORF3c"])),yes="ORF3c",no=df_raw_depth_report_orf3bc$gene)
df_raw_depth_report_orf3bc <- subset(df_raw_depth_report_orf3bc,gene!="ORF3a")
df_raw_depth_report <- rbind(df_raw_depth_report,df_raw_depth_report_orf3bc)
df_raw_depth_report_gene9c <- subset(df_raw_depth_report,((df_raw_depth_report$V2>=v_start_genes["N"]) & (df_raw_depth_report$V2<=v_end_genes["N"])))
df_raw_depth_report_gene9c$gene <- ifelse(test = ((df_raw_depth_report_gene9c$V2>=v_start_genes["gene9c"]) & (df_raw_depth_report_gene9c$V2<=v_end_genes["gene9c"])),yes="gene9c",no=df_raw_depth_report_gene9c$gene)
df_raw_depth_report_gene9c <- subset(df_raw_depth_report_gene9c,gene!="N")
df_raw_depth_report <- rbind(df_raw_depth_report,df_raw_depth_report_gene9c)
v_avg_cov_gene <- vapply(X = v_genes_with_unique_product,FUN = function(x) return(mean((rowMeans(subset(df_raw_depth_report,gene==x)[,3:(3+nb_samples-1)])),na.rm=TRUE)),FUN.VALUE = c(0.1))
v_avg_cov_gene <- vapply(X = v_genes_with_unique_product,FUN = function(x) return(mean(((subset(df_raw_depth_report,gene==x)[,3:(3+nb_samples-1)])),na.rm=TRUE)),FUN.VALUE = c(0.1))
v_genes_length <- v_end_genes - v_start_genes + 1
#Number of mutations per sample
v_nb_SNVs_per_sample_with_all_original_samples <- as.vector(table(df_variants$Sample)[lst_samples_original])
names(v_nb_SNVs_per_sample_with_all_original_samples) <- lst_samples_original
v_nb_SNVs_per_sample_with_all_original_samples <- ifelse(test = is.na(v_nb_SNVs_per_sample_with_all_original_samples),yes=0,no=v_nb_SNVs_per_sample_with_all_original_samples)
df_plot_nb_mutations_per_sample <- data.frame(Sample=names(v_nb_SNVs_per_sample_with_all_original_samples),x=v_nb_SNVs_per_sample_with_all_original_samples,stringsAsFactors = F)
Nb_mutations_per_sample_gg <- ggplot(data = subset(df_plot_nb_mutations_per_sample,!grepl(pattern="Ctrl",x=Sample,fixed=T))) + geom_col(aes(x=reorder(Sample,-x),y=x),fill="black") + xlab("Sample") + ylab("Number of mutations")  + theme_bw() + theme(axis.title = element_text(size=16),axis.text = element_text(size=14),legend.title = element_text(size=16),legend.text = element_text(size=12),axis.text.x = element_blank())
Nb_mutations_per_sample_gg
ggsave(filename = "Nb_mutations_per_sample.png", path=output_workspace, width = 20, height = 15, units = "cm")
summary(df_plot_nb_mutations_per_sample$x);sd(df_plot_nb_mutations_per_sample$x);
df_variants$date <- unname(vapply(X = df_variants$Sample,FUN = get_date_of_sample,FUN.VALUE = c("")))
df_variants$date <- ifelse(test=df_variants$date=="NA",yes=NA,no=df_variants$date)
v_samples_date <- rep(NA, length(lst_samples_original))
names(v_samples_date) <- lst_samples_original
v_samples_date <- unname(vapply(X = names(v_samples_date),FUN = get_date_of_sample,FUN.VALUE = c("")))
v_samples_date <- ifelse(test=v_samples_date=="NA",yes=NA,no=v_samples_date)
names(v_samples_date) <- lst_samples_original
# v_samples_date <- ifelse(test = (is.na(v_samples_date))&(unname(vapply(X = names(v_samples_date),FUN = function(x) grepl(pattern = "-202",x = x,fixed = T),FUN.VALUE = c(T)))),yes = unname(vapply(X = names(v_samples_date),FUN=get_date_from_sample_name_with_date_en2,FUN.VALUE = c(""))),no = v_samples_date)
# names(v_samples_date) <- lst_samples_original
# v_samples_date <- gsub(pattern = "2021_",replacement = "2021-",x = v_samples_date,fixed = T)
# names(v_samples_date) <- lst_samples_original
# v_samples_date <- ifelse(test = (is.na(v_samples_date))&(unname(vapply(X = lst_samples_original,FUN = function(x) grepl(pattern = "-20_",x = x,fixed = T),FUN.VALUE = c(T)))),yes = unname(vapply(X = lst_samples_original,FUN=get_date_from_ON_20_samples_with_date,FUN.VALUE = c(""))),no = v_samples_date)
# v_samples_date <- ifelse(test = (is.na(v_samples_date))&(unname(vapply(X = lst_samples_original,FUN = function(x) grepl(pattern = "-21_",x = x,fixed = T),FUN.VALUE = c(T)))),yes = unname(vapply(X = lst_samples_original,FUN=get_date_from_ON_21_samples_with_date,FUN.VALUE = c(""))),no = v_samples_date)
# names(v_samples_date) <- lst_samples_original
# v_samples_date <- ifelse(test = (unname(vapply(X = lst_samples_original,FUN = function(x) grepl(pattern = "-2020_",x = x,fixed = T),FUN.VALUE = c(T)))),yes = unname(vapply(X = lst_samples_original,FUN=get_date_from_sample_name_with_date_fr,FUN.VALUE = c(""))),no = v_samples_date)
# v_samples_date <- ifelse(test = (unname(vapply(X = lst_samples_original,FUN = function(x) grepl(pattern = "-2021_",x = x,fixed = T),FUN.VALUE = c(T)))),yes = unname(vapply(X = lst_samples_original,FUN=get_date_from_sample_name_with_date_fr2,FUN.VALUE = c(""))),no = v_samples_date)
# names(v_samples_date) <- lst_samples_original
write.table(x = names(v_samples_date)[is.na(v_samples_date)],file = paste0(output_workspace,"List_samples_with_missing_sampling_date_ALL_ILLUMINA_SAMPLES.csv"),sep = ",",row.names = F,col.names = F)
paste0("Number of samples with a MISSING sampling date = ",nb_samples_original - sum(!is.na(v_samples_date))," out of ",nb_samples_original,"!")
v_samples_location <- unname(vapply(X = lst_samples_original,FUN = get_location_from_sample_name_with_location,FUN.VALUE = c("")))
v_samples_location <- ifelse(test=v_samples_location=="",yes=NA,no=v_samples_location)
names(v_samples_location) <- lst_samples_original
#function to get the position of a mutation from the mutation name
get_position_from_mut_name <- function(the_mut_name){
pos_init <- 2
pos_end <- gregexpr(pattern = ";",text = the_mut_name,fixed = T)[[1]][1] - 2
return(as.integer(substr(the_mut_name,pos_init,pos_end)))
}
#Presence of lineage marker-mutations (>=90% prevalent only in a certain lineage consensus sequences) and inference of lineages presence
#function that converts genomic mutation into protein mutation
convert_genomic_mut_to_prot_mut <- function(the_genomic_mut){
ref_nucl <- substr(the_genomic_mut,1,1)
the_position <- as.integer(substr(the_genomic_mut,2,nchar(the_genomic_mut)-1))
new_nucl <- substr(the_genomic_mut,nchar(the_genomic_mut),nchar(the_genomic_mut))
the_orf <- find_ORF_of_mutation(the_position)
the_gene <- find_gene_of_mutation(the_position)
if (is.na(the_orf)||(grepl(pattern = "UTR",x = the_orf,fixed = TRUE))){
return(NA)
}else{
pos_in_codon <- ((the_position - v_start_orfs[the_orf] + 1)%%3)+(3*as.integer(((the_position - v_start_orfs[the_orf] + 1)%%3)==0))
if (pos_in_codon==1){
ref_codon <- substr(x = genome_refseq,start = the_position,stop = the_position+2)
mut_codon <- paste0(new_nucl,substr(x = genome_refseq,start = the_position+1,stop = the_position+2))
}else if (pos_in_codon==2){
ref_codon <- substr(x = genome_refseq,start = the_position-1,stop = the_position+1)
mut_codon <- paste0(substr(x = genome_refseq,start = the_position-1,stop = the_position-1),new_nucl,substr(x = genome_refseq,start = the_position+1,stop = the_position+1))
}else if (pos_in_codon==3){
ref_codon <- substr(x = genome_refseq,start = the_position-2,stop = the_position)
mut_codon <- paste0(substr(x = genome_refseq,start = the_position-2,stop = the_position-1),new_nucl)
}else{
stop("Codon position must be between 1 and 3!!!")
}
}
if (nchar(ref_codon)!=3){
stop("codon length should be 3!")
}
pos_in_prot <- unname(ceiling((the_position - v_start_genes[the_gene] + 1)/3))
ref_aa <- translate_seq(the_codon = ref_codon)
new_aa <- translate_seq(the_codon = mut_codon)
return(as.character(paste0(the_gene,":",ref_aa,pos_in_prot,new_aa)))
}
#function that converts genomic mutation into ORF protein seq mutation
convert_genomic_mut_to_ORF_prot_mut <- function(the_genomic_mut){
ref_nucl <- substr(the_genomic_mut,1,1)
the_position <- as.integer(substr(the_genomic_mut,2,nchar(the_genomic_mut)-1))
new_nucl <- substr(the_genomic_mut,nchar(the_genomic_mut),nchar(the_genomic_mut))
the_orf <- find_ORF_of_mutation(the_position)
if (is.na(the_orf)||(grepl(pattern = "UTR",x = the_orf,fixed = TRUE))){
return(NA)
}else{
pos_in_codon <- ((the_position - v_start_orfs[the_orf] + 1)%%3)+(3*as.integer(((the_position - v_start_orfs[the_orf] + 1)%%3)==0))
if (pos_in_codon==1){
ref_codon <- substr(x = genome_refseq,start = the_position,stop = the_position+2)
mut_codon <- paste0(new_nucl,substr(x = genome_refseq,start = the_position+1,stop = the_position+2))
}else if (pos_in_codon==2){
ref_codon <- substr(x = genome_refseq,start = the_position-1,stop = the_position+1)
mut_codon <- paste0(substr(x = genome_refseq,start = the_position-1,stop = the_position-1),new_nucl,substr(x = genome_refseq,start = the_position+1,stop = the_position+1))
}else if (pos_in_codon==3){
ref_codon <- substr(x = genome_refseq,start = the_position-2,stop = the_position)
mut_codon <- paste0(substr(x = genome_refseq,start = the_position-2,stop = the_position-1),new_nucl)
}else{
stop("Codon position must be between 1 and 3!!!")
}
}
if (nchar(ref_codon)!=3){
stop("codon length should be 3!")
}
pos_in_ORF_prot_seq <- unname(ceiling((the_position - v_start_orfs[the_orf] + 1)/3))
ref_aa <- translate_seq(the_codon = ref_codon)
new_aa <- translate_seq(the_codon = mut_codon)
return(as.character(paste0(the_orf,":",ref_aa,pos_in_ORF_prot_seq,new_aa)))
}
#mutation prevalence data
df_prevalence_mut_of_interest_in_NCBI_WORLDWIDE_lineages <- readRDS(file = paste0(input_workspace,"Table_df_all_mutations_prevalence_in_lineages.rds"))
